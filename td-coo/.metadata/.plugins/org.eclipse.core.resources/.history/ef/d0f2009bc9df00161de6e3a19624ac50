package com.model;

public class Grille extends AbstractModel {

	
	private static final int NB_LIGNE = 3; 
	private int nbSet=0;
	private Symbole grille[][];
	
	
	public Grille()
	{
		grille=new Symbole[NB_LIGNE][NB_LIGNE];
	}

	@Override
	public void init_grille() {
		
		nbSet=0;
		
		for(int i=0; i<NB_LIGNE; i++)
			for(int j=0; j<NB_LIGNE; j++)
				grille[i][j]=Symbole.VIDE;
	}
	
	public void set_grille(Symbole j, int x, int y) throws IllegalMoveException {
        if(grille[x][y]==Symbole.VIDE&&j!=Symbole.VIDE)
        	grille[x][y]=j;
        else
        	throw new IllegalMoveException();
        	
    } 

    public boolean isGameOver()
    {
    	return (nbSet==NB_LIGNE*NB_LIGNE);
    		
    }
    
    public Symbole getWinner()
    {
    	boolean pattern=true;
    	
    	//chaque ligne
    	for(int i=0; i<NB_LIGNE; i++)
    	{
    		pattern=true;
    		for(int j=0; j<NB_LIGNE-1; j++)
    			if(grille[i][j]!=grille[i][j+1])
    				pattern=false;
    		if(pattern)return grille[i][0];
    	}
    	
    	//chaque colonne
    	for(int j=0; j<NB_LIGNE; j++)
    	{
    		pattern=true;
    		for(int i=0; i<NB_LIGNE-1; i++)
    			if(grille[i][j]!=grille[i][j+1])
    				pattern=false;
    		if(pattern)return grille[0][j];
    	}
    	
    	//chaque diagonale
    	pattern=true;
    	for(int i=0; i<NB_LIGNE-1; i++)
    		if(grille[i][i]!=grille[i+1][i+1])
    			pattern=false;
    	if(pattern) return grille[0][0];
    			
    	pattern=true;
    	for(int i=0,j=NB_LIGNE-1; j>0 i<NB_LIGNE-1; i++, j++)
    		if(grille[i][i]!=grille[i-1][i-1])
    			pattern=false;
    	if(pattern) return grille[NB_LIGNE-1][];
    			
    	
    	
		return Symbole.VIDE;
    	
    }
    
    
	
	
}
